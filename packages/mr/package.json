{
  "name": "mr",
  "version": "0.0.3",
  "main": "require",
  "bin": {
    "mr": "bin/mr"
  },
  "dependencies": {
    "q": "*"
  },
  "directories": {
    "packages": "packages"
  },
  "readme": "\nMontage Require\n===============\n\nThis is a CommonJS module system, highly compatible with NodeJS,\nintended for front-end development of web applications using NPM style\npackages.  It is designed to be automatically replaced by the Montage\nOptimizer with a smaller, faster, and bundled production module system.\n\nTo use, install the module system in your application package with NPM.\n\n```\nnpm install mr\n```\n\nThen, incorporate the Montage Require bootstrapping script in an HTML\ndocument.\n\n```html\n<script\n    src=\"node_modules/mr/bootstrap.js\"\n    data-module=\"index\"\n></script>\n```\n\n```html\n<script\n    src=\"node_modules/mr/bootstrap.js\"\n    data-auto-package\n    data-module=\"index\"\n></script>\n```\n\n```html\n<script\n    src=\"node_modules/mr/bootstrap.js\"\n    data-package=\".\"\n    data-module=\"index\"\n></script>\n```\n\n-   `data-auto-package` indicates that there is no `package.json` for\n    this application, and instructs Montage Require to pretend that an\n    empty one exists in the same directory as the HTML document.\n-   `data-package` alternately, indicates that there is a `package.json`\n    and that it can be found at the given location.  The default\n    location is the same directory as the HTML file.\n-   `data-module` instructs Montage Require to `require` the given\n    module after it has finished bootstrapping and the DOM content\n    has loaded.\n\n\nNode and NPM Compatibility\n==========================\n\nMontage fully supports CommonJS Modules and Packages.  It also supports\nsome of the extensions from NodeJS and NPM.\n\n-   **module.exports**: Modules that do not have cyclic dependencies\n    (modules with dependencies that in turn ultimately depend their own\n    exports) can redefine their exports object by assigning to\n    ``module.exports``.\n-   **dependencies**: If a package declares a package dependency using\n    NPM’s ``dependencies`` property, Montage looks for that package in\n    the package’s ``node_modules`` subdirectory.  Montage Require also\n    supports the case where a package with the same name is already\n    loaded by a parent package.  Unlike NPM, with Montage packages, you\n    can override the location of the ``node_modules`` directory with the\n    ``directories.packages`` property, or use mappings to find\n    individual packages in alternate locations or give them different\n    local names.\n-   **JSON**: Resources with the `.json` extension can be loaded as JSON\n    formatted modules.\n\nExtensions:\n\n-   **redirects**: a `redirects` block in `package.json` a module\n    identifier to redirect to an alternate module identifier.\n-   **returnable exports**:  A module can return an exports object.  This\n    would make that module incompatible with NodeJS, where the idiom\n    `module.exports =` prevails.\n-   **mappings**: Packages can declare some or all of their package\n    dependencies with the URL ``location`` of the package, particularly\n    a URL relative to the depending package.  Mappings override\n    dependencies if there are conflicts.\n-   **require.packageDescription**: Packages expose the parsed\n    contents of the ``package.json`` file.\n-   **module.location**: Packages expose the URL of the corresponding\n    source.\n-   **module.directory**: Packages expose the URL of the directory\n    containing the corresponding source.\n\nNot supported:\n\n-   `dependencies` version predicates are ignored.\n-   `__filename` and `__dirname` are not injected into module scope.\n    Consider using `module.location` and `module.directory` URLs\n    instead.\n-   `index.js` is not sought if you require a directory.  To make a\n    package using an `index.js` compatible with Montage Require, add a\n    `redirects` block to `package.json` like `{\"redirects\": {\"foo\":\n    \"foo/index\"}}`.\n\nThe Montage modules debug-mode run-time loads modules asynchronously and\ncalculates their transitive dependencies heuristically&mdash;by\nstatically scanning for ``require`` calls using a simple regular\nexpression.  Montage can load cross-origin scripts in debug-mode if the\nCORS headers are set on the remote server.\n\nTake a look at the Montage Optimizer to optimize applications for\nproduction.  The optimizer can bundle packages with all of the dependent\nmodules, can preload bundles of progressive enhancements in phases, and\ncan generate HTML5 application cache manifests.\n\n\nOptimizer Script Attributes\n===========================\n\nThe Montage Optimizer, `mop`, does not yet handle stand-alone Montage\nRequire.  However, when it does, the optimizer can convert entire\npackages to production ready versions without manual alteration.  The\noptimizer rewrites HTML, particularly replacing the bootstrapping script\nwith a bundle.  As such, the run-time supports some additional options.\n\n-   `data-bootstrap` indicates that this script element is the\n    `bootstrap.js` script and denotes the location of that script.\n    This is normally inferred from being a script with a `bootstrap.js`\n    file name, but an optimizer might replace the `<script>` tag with a\n    bundle with a different name.\n\nThe optimizer can convert all resources into script-injection form, by\nchanging `.js` modules to `.load.js` scripts with `define(hash, id,\ndescriptor)` boilerplate.  This permits packages to be loaded\ncross-origin and with content security policies that forbid `eval`.  The\nhash is a consistent hash for each package.  The bootstrapper needs to\nknow these hashes so it can recognize incoming `package.json.load.js`\ndefinitions.\n\n-   `data-bootstrap-hash`\n-   `data-application-hash`\n-   `data-q-hash`\n\nAmong other things, the optimizer is also responsible for processing\n`package.json` files to include the `hash` of each `dependency`.\n\n\nCross-browser Compatibility\n===========================\n\nAt present, Montage Require depends on `document.querySelector` and\nprobably several other recent EcmaScript methods that might not be\navailable in legacy browsers.  With your help, I intend to isolate and\nfix these bugs.\n\nAt time of writing, tests pass in Chrome 21, Safari 5.1.5, and Firefox\n13 on Mac OS 10.6.\n\n\nHow It Works\n============\n\nIn broad strokes, Montage Require uses so-called \"XML\" HTTP requests to\nfetch modules, then uses a regular expression to scan for `require`\ncalls within each JavaScript module, then executes the module with some\nvariation of `eval`.  Then, with the Montage Optimizer, `mop`, Montage\nRequire can also serve as the runtime for loading modules with bundled\nscript-injection with no alteration to the source code of an\napplication.  With script-injection, XHR and `eval` are not necessary,\nso applications are suitable for production, cross-domain, and with\ncontent security policies (CSP) that forbid `eval`.\n\nIn slightly thinner strokes, Montage Require has an asynchronous phase\nand a synchronous phase.  In the asynchronous \"loading\" phase, Montage\nRequire fetches every module that it will need in the synchronous phase.\nIt then passes into the synchronous \"execution\" phase, where `require`\ncalls actually occur.  The asynchronous portion includes\n`require.async`, `require.load`, and `require.deepLoad`, which return\n[Q][] promises.  The synchronous phase employs `require` calls directly\nto transitively instantiate modules on demand.  The system must be\nkicked off with `require.async` since no modules are loaded initially.\n\n[Q]: http://github.com/kriskowal/q\n\nSome alternatives to Montage Require use a full JavaScript parser to\ncull the false positives you will occasionally see when using regular\nexpressions to scan for static `require` calls.  This is a trade-off\nbetween weight and accuracy.  Montage Require does not block execution\nwhen it is unable to load these false-positive modules, but instead\ncontinues to the execution to \"wait and see\" whether the module can run\nto completion without the module that failed to load.  Also, Montage\nRequire can be configured to use an alternate dependency parser.\n\nAround this system, Montage Require supports packages.  This entails\nasynchronously loading and parsing `package.json` files, then\nconfiguring and connecting the module systems of each package in the\n\"load\" phase.  Package dependencies are loaded on demand.\n\nEach package has an isolated module identifier name space.  The\n`package.json` dictates how that name space forwards to other packages\nthrough the `dependencies` property, as well as internal aliases from\nthe package's `name`, `main`, and `redirects` properties.\n\nAdditionally, Montage Require is very configurable and pluggable.\nMontage itself vastly extends the capabilities of Montage Require so\nthat it can load HTML templates.  Montage's internal configuration\nincludes middleware stacks for loading and compiling.  The loader\nmiddleware stack can be overridden with `config.makeLoader` or\n`config.load`.  The compiler middleware can be overridden with\n`config.makeCompiler` or `config.compile`.  The makers are called to\ncreate loaders or compilers *per package*, each receiving the\nconfiguration for their particular package.\n\nThe signature of loader middleware is `makeLoader(config, nextLoader)`\nwhich must return a function of the form `load(id, module)`.  The\nsignature of compiler middleware if `makeCompiler(config, nextCompiler)`\nwhich must return a function of the form `compile(module)`.\n\nAs part of the bootstrapping process, configuration begins with a call\nto `Require.loadPackage(dependency, config)` that returns a promise for\nthe `require` function of the package.\n\n`config` is an optional base configuration that can contain alternate\n`makeLoader`, `makeCompiler`, and `parseDependencies` functions.\nMontage Require then takes ownership of the `config` object and uses it\nto store information shared by all packages like the registries of known\npackages by name and location, and memoized promises for each package\nwhile they load.\n\n`dependency` declares the location of the package, and can also inform\nthe module system of the consistent `hash` of the package.  Dependency\ncan be a `location` string for short, but gets internally normalized to\nan object with a `location` property.  The `hash` is only necessary for\noptimized packages since they use script-injection.  The injected\nscripts call `define` for each module, identifying the module by the\ncontaining package `hash` and module `id`.\n\nThe `require` function for any package has a similar `loadPackage`\nfunction that can take a dependency argument.  That dependency may have\na `name` instead of `location`.  In that case, Montage Require infers\nthe location based on the known locations of packages with that name, or\nassumes the package exists within the `node_modules` directory of the\ndependent package.  This is a relatively safe assumption if the\napplication was installed with NPM.\n\nMontage Require also supports a form of dependency injection.  These\nfeatures were implemented because `bootstrap.js` (and in Montage proper,\n`montage.js`) would need to load and instantiate certain resources\nbefore being able to instantiate a module system.  To avoid reloading\nthese already-instantiated resources, the bootstrapper would inject them\ninto the packages before handing control over to the application.\n\n`require.inject(id, exports)` adds the exports for a given module to a\npackage.\n\n`require.injectPackageDescription(location, description)` allows the\nmodule system to read the content of a `package.json` for the package at\n`location` without fetching the corresponding file.\n\n`require.injectPackageDescriptionLocation(location,\ndescriptionLocation)` instructs the module system to look in an\nalternate location for the `package.json` for a particular package.\n\n\nInterface\n=========\n\n## require\n\nA `require` function stands for a package. Specialized `require`\nfunctions exist within each module.  Calling `require` from outside a\nmodule will return the exports of the module with the given top-level\nidentifier.  Calling `require` within a module will resolve the given\nidentifier relative to the current module and return the exports of the\ncorresponding module.  `require` will throw an exception if a needed\nmodule has not yet been loaded.\n\n-   **async(id)**: returns a promise for the exports of the module with\n    the given identifier.\n-   **location**: the URL of the package, including the trailing slash\n    for the directory.\n-   **resolve(id)**: returns the top-level identifier for a module,\n    relative to the current module.\n-   **load(id)**: returns a memoized promise for the loading of the\n    corresponding module.\n-   **deepLoad(id)**: returns a memoized promise that the module and its\n    transitive dependencies have all loaded.\n-   **identify(id, require)**: a module may have a different identifier\n    in another package.  This returns the identifier for a module in a\n    subpackage.\n-   **getModuleDescriptor(id)**: returns a memoized `module` object\n    describing the module in this package for the given identifier.  If\n    one does not exist, it creates one with `id`, `display`, and\n    `require` properties to get things started.\n-   **loadPackage(dependency)**: returns a promise for a `require`\n    function representing the given package.  The `dependency` may be by\n    `name`, `location`, or both.  If by `name` without `location`, the\n    `location` is inferred from the registry of known packages, or from\n    the `node_modules` directory within this package.  If by `name` and\n    `location`, the location is added to the registry of known package\n    names.\n-   **getPackage(dependency)**: returns the `require` function for an\n    already loaded package, or throws an error.\n-   **inject(id, exports)**: adds a module for a given identifier with\n    the given exports, and sets its `module.injected` to true.  This\n    prevents the module system from attempting to load the module.\n-   **injectPackageDescription(location, description)**: informs the\n    module system of the parsed contents of the `package.json` for the\n    package at the given location.  This may be a lie.  This prevents\n    the module system from attempting to load the `package.json`.  The\n    corresponding `package.json` need not actually exist.\n-   **injectPackageDescriptionLocation(location, descriptionLocation)**: \n    informs the module system of an alternate URL from which to download\n    the `package.json` for this package.\n-   **read(location)**: an exposed internal utility for reading the\n    contents of a resource at a given URL.  Returns a promise for the\n    corresponding text.\n-   **config**: the configuration object for this package.  The `config`\n    provided by the module system to each package prototypically\n    inherits from the `config` given to the initial\n    `Require.loadPackage` and contains additional properties obtained by\n    analyzing `package.json`.  Many but not all of these properties have\n    the same name and shape as those in `package.json`.\n-   **packageDescription**: the original parsed contents of the\n    `package.json`, or that object delegated by\n    `injectPackageDescription`.\n\n## module\n\nThe `module` object is available within a module, returned by\n`require.getModuleDescriptor(id)`, and passed to loader and compiler\nmiddleware for decoration.\n\n-   **id**: the identifier of the module within its containing package\n-   **exports**: the interface of the module, if it has been instantiated\n-   **location**: the URL from which the module is or will be loaded\n-   **directory**: the directory URL, including trailing slash, containing\n    the module\n-   **display**: the location and id of a module separated by an\n    octothorpe, for display purposes\n-   **require**: the package containing the module\n-   **text**: the text of the module, only available in development.  After\n    optimization, a module is declared with its `factory` as a\n    JavaScript function and has no corresponding `text`.  The `text` is\n    useful for compiler middleware.\n-   **factory**: a function that, when called with the arguments\n    `require`, `exports`, and `module`, either populates `exports`,\n    reassigns `module.exports`, or returns `exports` to instantiate the\n    module.\n-   **dependencies**: an array of module identifiers of modules that\n    must be loaded before calling the factory, produced by\n    `parseDependencies`.\n-   **extraDependencies**: an array of additional module identifiers for\n    modules that must be loaded before calling the factory that may be\n    specified through other means than `parseDependencies`.\n-   **dependees**: an object with a key for every module that declares\n    this module as a dependency, populated automatically by `deepLoad`.\n-   **redirect**: the identifier of a module that stands in for this\n    module, so `require` returns its exports instead.  A redirect is an\n    implied dependency.  Redirect cycles should be avoided.\n-   **mappingRedirect**: the identifier of a module in another package\n    that provides this module, so `require` returns its exports instead.\n-   **mappingRequire**: the `require` function of the package that\n    provides this module.\n-   **injected**: whether this module's exports were injected by\n    `require.inject(id, exports)`.\n\n## config\n\n`Require.loadPackage` accepts the following configuration options for\nall packages in a fresh module system.\n\n-   **makeLoader**: the module loader maker, which by default depends on\n    whether the loader is running on a browser or on Node.  On the\n    browser, it is a stack of `Require.MappingsLoader`,\n    `Require.ExtensionsLoader`, `Require.PathsLoader`,\n    `Require.MemoizedLoader`, then either `Require.ScriptLoader` or\n    `Require.XhrLoader` depending on `config.define` for the config of\n    the particular package.\n-   **makeCompiler**: the compiler maker for each package, which by\n    default is a stack of the `Require.JsonCompiler`,\n    `Require.ShebangCompiler`, `Require.DependenciesCompiler`, and\n    `LintCompiler` middleware.\n-   **lint**: an optional event handler that accepts a `module` if its\n    `text` is invalid JavaScript.  There is no default value.  `lint` is\n    used by `Require.LintCompiler` middleware.\n-   **read**: an optional resource reader, a function that must accept a\n    fully qualified URL and return a promise for the content of that\n    resource as a string.  The default reader depends on whether Montage\n    Require is running in a browser or on Node.\n\nMontage Require then adds shared state for all packages to the `config`.\n\n-   **registry**: the location of each known package by name, for those\n    packages that have either designated their own name, or been named\n    by a dependent package in the `dependencies` or `mappings`\n    properties of their package description.\n-   **getPackage**: returns the `require` function for a package that\n    has already been loaded, or throws an error.\n-   **loadPackage**: returns a memoized promise for the description of a\n    package at a given location.\n-   **descriptions**: promises for each package description that is\n    loading or has been loaded, by location.\n-   **descriptionLocations**: an object mapping package locations to the\n    locations of their package descriptions if an alternate is injected\n    with `require.injectPackageDescriptionLocation`.\n\nThen, for each package, Montage Require creates a `config` that\nprototypically inherits from the master `config` and expands on that\nconfiguration with details synthesized from the content of the package\ndescription, `package.json`.  This is the config that gets passed to\n`Require.makeRequire(config)`.\n\n-   **location**: the package's location directory, including a trailing\n    slash.\n-   **name**: the name of this package, if it has one.\n-   **packageDescription**: the original package description, either\n    parsed from a `package.json` or injected by\n    `require.injectPackageDescription`.\n-   **define**: true if this package uses script injection to load\n    resources.\n-   **modules**: object mapping module descriptions by identifier\n-   **lib**: the root directory location where modules can be found, by\n    default the same as `location`.\n-   **paths**: a prioritized array of directories in which to search for\n    modules for this package, by default just the `lib` directory.  It\n    is inadvisable to give this array multiple entries on the\n    client-side, and thus inadvisable for packages that might be used\n    both client and server side.  Really, just don't use this.  It is\n    used only by `PathsLoaders` middleware to convert module identifiers\n    to locations.\n-   **mappings**: object mapping module identifier prefixes to\n    dependencies.  These dependencies are suitable for passing to\n    `require.loadPackage`.\n-   **packagesDirectory**: the location in which to look for unknown\n    packages by name, by default `node_modules` within this package.\n-   **exposedConfigs**: an array of `config` properties instructing\n    `makeRequire` to copy those properties from `config` to each\n    `require` function, by default `paths`, `mappings`, `location`,\n    `packageDescription`, `packages`, and `modules`.\n\nWithin `Require.makeRequire(config)`, Montage Require uses `makeLoader`\nand `makeConfig` with its own `config` to produce `config.load` and\n`config.compile` properties.  The `config.load` in particular is\ndistinct and used internally by `require.load`, which memoizes and\ncompiles modules.\n\n## package.json (package description)\n\nMontage Require configures each package based on the contents of\n`package.json`, the package description, and the shared configuration.\nThese properties are meaningful to Montage Require.\n\n-   **name**: the name of the package, which may be used to connect\n    common dependencies of the same name in subpackages.\n-   **dependencies**: an object mapping a string that represents both a\n    module identifier prefix and a package name, to an ignored version\n    predicate.\n-   **mappings**: an object that maps a module identifier prefix to a\n    dependency.  The dependency may be a location string, or an object\n    with `location`, `name`, or `hash` properties.  The location may be\n    inferred from dependencies of already discovered packages, or from\n    the location of the dependent package and the name.  The `hash` is\n    generated by an optimizer and only used for loading modules with\n    script injection.\n-   **overlay**: an object defining alternate configurations depending\n    on the platform.  Keys correspond to engines and values are\n    alternate properties to overwrite on the package description.  For\n    the browser, the `window`, `browser`, and `montage` engines are\n    applied.  This property is likely to be deprecated and replaced by\n    an `if` block or other content-negotiation blocks in the future.\n-   **directories**: an object containing optional `lib` and `packages`\n    directory overrides.  The `lib` directory is a location relative to\n    this package at which to find modules.  The `packages` directory is\n    a location relative to this package in which to find unknown\n    packages by name.\n-   **main**: the module identifier of the module that represents this\n    package when required in other packages by the mapping module\n    identier, or in this package by its own name.\n\n\nMaintenance\n===========\n\nTests are in the `spec` directory.  All of the CommonJS module tests\nexist in there as well as tests for packaging and extensions.\n\nOpen `spec/run.html` in a browser to verify the specs.\n\nThis implementation is a part from Motorola Mobility’s [Montage][] web\napplication framework.  The module system was  written by Tom Robinson\nand Kris Kowal.  Motorola holds the copyright on much of the original\ncontent, and provided it as open source under the permissive BSD\n3-Clause license.  This project is maintained by Kris Kowal, continuing\nwith that license.\n\n[Montage]: http://github.com/montage.js/montage\n\n",
  "_id": "mr@0.0.3",
  "description": "Montage Require ===============",
  "_from": "mr@0.0.x"
}
