
Pipeline ::=
    (
        (
            PropertyName |
            "#" ElementId |
            "@" ComponentLabel |
            ArrayExpression |
            ObjectExpression |
            "(" Expression ")"
        )
        (
            "." Transform |
            "[" Expression "]"
        )*
        (
            ".*" |
            "[*]" |
        )
    )?

Transform ::=
    (
        PropertyName
    ) |
    (
        "(" Expression ")" |
        ArrayExpression |
        ObjectExpression
    ) |
    (
        (
            "flatten" |
            "reversed" |
            "enumerate" |
            "sum" |
            "average"
        )
        (
            "()" |
            "{" Expression "}"
        )
    ) |
    (
        (
            "map" |
            "filter" |
            "some" |
            "every" |
            "sorted"
        )
        (
            "(" Expression ")" |
            "{" Expression ")"
        )
    ) |
    "has(" Expression ")" |
    "view(" Expression ", " Expression ")"

ArrayExpression ::=
    "[" ( Expression (", " Expression )* )? "]"

ObjectExpression ::=
    "{"
        (
            ( PropertyName ": " Expression )
            ( ", " PropertyName ": " Expression )*
        )?
    "}"

UnaryExpression ::=
    ( "+" | "-" | "!" )? Pipeline
ExponentialExpression ::=
    UnaryExpression ( ( "**" | "//" | "%%" ) UnaryExpression )*
MultiplicativeExpression ::=
    ExponentialExpression
    ( ( "*" | "/" | "%" | "rem" ) ExponentialExpression )*
ArithmeticExpression ::=
    MultiplicativeExpression
    ( ( "+" | "-" ) MultiplicativeExpression )*
RelationalExpression ::=
    ArithmeticExpression
    ( ( "==" | "<" | "<=" | ">" | ">=" ) ArithmeticExpression )?
LogicalIntersectionExpression ::=
    RelationalExpression ( "&&" LogicalIntersectionExpression )?
LogicalUnionExpression ::=
    LogicalIntersectionExpression ( "||" LogicalUnionExpression )?
ConditionalExpression ::=
    LogicalUnionExpression ( "?" Expression ":" Expression )?
Expression ::= ConditionalExpression

Literal ::= NumberLiteral | StringLiteral
NumberLiteral ::= [0-9][1-9]* ( '.' [0-9]+ )?
StringLiteral ::= "'" ( NonQuoteChar | "\" QuoteChar )* "'"
PropertyName ::= [a-zA-Z0-9]+
ElementId ::= [a-zA-Z0-9]+
ComponentLabel ::= [a-zA-Z0-9]+

